#pragma kernel Cull

struct RendererChunk
{
    int Id;
    float2 Position;
    int PositionsCount;
    int IsOnView;
};

RWStructuredBuffer<RendererChunk> Chunks;
float4x4 CameraViewProjection;
float4 CameraPosition;
float3 ChunkBounds;

float SCREEN_ALLOWED_SIZE;
float Z_ALLOWED_SIZE;

float3 WorldToScreenPosition(float4 position)
{
    float4 viewSpace = mul(CameraViewProjection, (position - CameraPosition));
    float3 clipSpace = viewSpace.xyz;
    clipSpace /= -viewSpace.w;
    clipSpace = float3(clipSpace.xy, -viewSpace.w);
    return clipSpace;
}

bool IsOnView(float4 position)
{
    float3 screenPosition = WorldToScreenPosition(position);
    return screenPosition.x < SCREEN_ALLOWED_SIZE &&
        screenPosition.x > -SCREEN_ALLOWED_SIZE &&
        screenPosition.z > Z_ALLOWED_SIZE;
}

[numthreads(64, 1, 1)]
void Cull(uint3 id : SV_DispatchThreadID)
{   
    int ID = id.x;
    
    float4 chunkBounds = float4(ChunkBounds.x, ChunkBounds.y, ChunkBounds.z, 0) * .5f;
    
    float4 leftBackpos = float4(Chunks[ID].Position.x, 0, Chunks[ID].Position.y, 0) - chunkBounds;
    float4 rightForwardPos = float4(Chunks[ID].Position.x, 0, Chunks[ID].Position.y, 0) + chunkBounds;
    float4 rightBackPos = float4(Chunks[ID].Position.x, 0, Chunks[ID].Position.y, 0) + float4(chunkBounds.x, 0, -chunkBounds.z, 0);
    float4 leftForwardPos = float4(Chunks[ID].Position.x, 0, Chunks[ID].Position.y, 0) + float4(-chunkBounds.x, 0, chunkBounds.z, 0);
    
    Chunks[ID].IsOnView = IsOnView(leftBackpos) || IsOnView(rightForwardPos) || IsOnView(rightBackPos) || IsOnView(leftForwardPos) ? 1 : 0;
}


